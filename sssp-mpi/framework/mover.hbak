// The mover thread call back function is defined here.

#ifndef MOVER_H_
#define MOVER_H_

#include "scheduler.h"
#include "cpu_args.h"
#include "conf.h"
#include <vector>
#include <iostream>
#include <pthread.h>
#include "atomic.h"
using namespace std;

template <class VertexValue, class EdgeValue, class MessageValue>
void *move(void *arg) {
	cpu_args<VertexValue, EdgeValue, MessageValue> *ca =
      (cpu_args<VertexValue, EdgeValue, MessageValue> *)arg;  
	scheduler<VertexValue, EdgeValue, MessageValue> *s = ca -> scheduler;

	// Mover id.
	int tid = ca -> tid;
	msg_queue<MessageValue> *queues = s -> mq; 
	auto& active = s -> active;	
	vector<bool> local_active(num_working_threads, 1);
  auto* buf = s->msg_buf;

	// Counter of total number of threads that are still generating.
	int active_count = num_working_threads;
	msg_queue<MessageValue>* cur_queue;
	vector<size_t>& index_array = s->index_array;
	msg<MessageValue> v;
	int*& index_map = s->index_map;
  msg_queue<MessageValue>* mq = queues + tid;
  const auto& global_to_local_map = s->g->global_to_local_map;
  const auto& remote_index_array = s->remote_index_array;
  const auto& remote_msg_buf = s->remote_msg_buf;

	while(active_count) {
		for (int i = 0; i < num_working_threads; ++i) {
			if(!local_active[i])
				continue;
			cur_queue = mq + i * num_queues;
			// Try to read a block from the queue.
			size_t read = 0;
			while (read < msgs_moved && cur_queue -> pop_back(&v)) {
				++read;
        int dst = global_to_local_map[v.dst];
        // This is a message being sent to remote worker.
        if (dst == -1) {
          ;
          // s->remote_msg_buf[remote_index_array[v.dst]].insert(v.value);
        } else {
          // Redirect: v.dst is in a new position after sorting.
				  int new_dst = index_map[dst];
          // dst_buf is the destination buffer for this message.
				  int dst_buf = s -> get_dst_buf(new_dst);
				  if(index_array[new_dst] == -1) {
				  	index_array[new_dst] = buf[dst_buf].allocate_column();
          } 
				  buf[dst_buf].insert(index_array[new_dst], v.value);	
        }
			}

			if (!(active[i]).load()) {
				// Read possible remaining msgs.
				while (!cur_queue -> empty()) {
					cur_queue -> pop_back(&v);
          // This is a message being sent to remote worker.
          int dst = global_to_local_map[v.dst];
          if (dst == -1) {
            ;
            // s->remote_msg_buf[remote_index_array[v.dst]].insert(v.value);
          } else {
					  int new_dst = index_map[dst];
					  int dst_buf = s -> get_dst_buf(new_dst);
					  if(index_array[new_dst] == -1) {
					    index_array[new_dst] = buf[dst_buf].allocate_column();
            }
					  buf[dst_buf].insert(index_array[new_dst], v.value);	
					}	
        }
				local_active[i] = 0;
				--active_count;	
			}
		}
	}

	return (void *)0;
}

#endif
